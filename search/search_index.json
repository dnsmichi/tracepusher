{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"OpenTelemetry tracepusher Trace anything with OpenTelemetry! Generate and push OpenTelemetry Trace data to an endpoint in JSON format. Watch: Tracepusher in Action Uses Trace CICD Pipelines with OpenTelemetry Trace shell scripts with OpenTelemetry Use tracepusher in a CICD system Trace anything with OpenTelemetry Try tracepusher See try tracepusher Quick Start docker run gardnera/tracepusher:v0.6.0 \\ --endpoint http(s)://OTEL-COLLECTOR-ENDPOINT:4318 \\ --service-name service_name \\ --span-name span_name \\ --duration SPAN_TIME_IN_SECONDS Advanced Usage See the following pages for advanced usage and reference information for the flags: Docker usage Python usage CI system usage Complex (Multi Span) Traces Span time shifting Span attributes and span attribute types tracepusher flag reference pages","title":"Home"},{"location":"#opentelemetry-tracepusher","text":"Trace anything with OpenTelemetry! Generate and push OpenTelemetry Trace data to an endpoint in JSON format.","title":"OpenTelemetry tracepusher"},{"location":"#watch-tracepusher-in-action","text":"","title":"Watch: Tracepusher in Action"},{"location":"#uses","text":"Trace CICD Pipelines with OpenTelemetry Trace shell scripts with OpenTelemetry Use tracepusher in a CICD system Trace anything with OpenTelemetry","title":"Uses"},{"location":"#try-tracepusher","text":"See try tracepusher","title":"Try tracepusher"},{"location":"#quick-start","text":"docker run gardnera/tracepusher:v0.6.0 \\ --endpoint http(s)://OTEL-COLLECTOR-ENDPOINT:4318 \\ --service-name service_name \\ --span-name span_name \\ --duration SPAN_TIME_IN_SECONDS","title":"Quick Start"},{"location":"#advanced-usage","text":"See the following pages for advanced usage and reference information for the flags: Docker usage Python usage CI system usage Complex (Multi Span) Traces Span time shifting Span attributes and span attribute types tracepusher flag reference pages","title":"Advanced Usage"},{"location":"adopters/","text":"Do you use tracepusher? Thanks! We'd love to know. Add your details to ADOPTERS.md","title":"Adopters"},{"location":"breaking-changes/","text":"v0.3.0 to v0.4.0 Argument handling was entirely re-written for v0.4.0 and tracepusher expects different arguments for v0.3.0 and v0.4.0 . Here is the readme for v0.3.0 .","title":"Breaking changes"},{"location":"breaking-changes/#v030-to-v040","text":"Argument handling was entirely re-written for v0.4.0 and tracepusher expects different arguments for v0.3.0 and v0.4.0 . Here is the readme for v0.3.0 .","title":"v0.3.0 to v0.4.0"},{"location":"faq/","text":"Why Does This Exist? Why, when tracegen and the replacement telemetrygen exist, does this exist? This tool does not replace or supercede those tools in any way. For lots of usecases and people, those tools will be better. However, they hide the inner-workings (the how ). For someone getting started or wanting to truly understand what is happening, there is \"too much magic\". Stuff \"just works\" whereas tracepusher is more explicit - and thus (I believe) easier to see how the pieces fit together. The trace data that tracepusher generates is also customisable whereas \"you get what you get\" with tracegen / telemetrygen .","title":"FAQ"},{"location":"faq/#why-does-this-exist","text":"Why, when tracegen and the replacement telemetrygen exist, does this exist? This tool does not replace or supercede those tools in any way. For lots of usecases and people, those tools will be better. However, they hide the inner-workings (the how ). For someone getting started or wanting to truly understand what is happening, there is \"too much magic\". Stuff \"just works\" whereas tracepusher is more explicit - and thus (I believe) easier to see how the pieces fit together. The trace data that tracepusher generates is also customisable whereas \"you get what you get\" with tracegen / telemetrygen .","title":"Why Does This Exist?"},{"location":"try/","text":"Try Tracepusher without Installation Try tracepusher from your browser, with nothing to install. tracepusher with open source software (Jaeger) tracepusher with Dynatrace Use tracepusher tracepusher can be used either via a docker image , CI-ready docker image or Python script .","title":"Try tracepusher"},{"location":"try/#try-tracepusher-without-installation","text":"Try tracepusher from your browser, with nothing to install. tracepusher with open source software (Jaeger) tracepusher with Dynatrace","title":"Try Tracepusher without Installation"},{"location":"try/#use-tracepusher","text":"tracepusher can be used either via a docker image , CI-ready docker image or Python script .","title":"Use tracepusher"},{"location":"reference/","text":"Technical Reference Pages Advances Usecases Complex (Multi Span) Traces OpenTelemetry Collector Configuration Flags Reference Debug Mode Flag Dry Run Flag Span Attribute Types Time Shifting","title":"Reference Pages"},{"location":"reference/#technical-reference-pages","text":"","title":"Technical Reference Pages"},{"location":"reference/#advances-usecases","text":"Complex (Multi Span) Traces OpenTelemetry Collector Configuration","title":"Advances Usecases"},{"location":"reference/#flags-reference","text":"Debug Mode Flag Dry Run Flag Span Attribute Types Time Shifting","title":"Flags Reference"},{"location":"reference/debug-mode/","text":"Debug Mode Add -x true or --debug true for extra output","title":"Debug mode"},{"location":"reference/debug-mode/#debug-mode","text":"Add -x true or --debug true for extra output","title":"Debug Mode"},{"location":"reference/dry-run-mode/","text":"Dry Run Mode Add --dr true , --dry-run true or --dry true to run without actually pushing any data.","title":"Dry run mode"},{"location":"reference/dry-run-mode/#dry-run-mode","text":"Add --dr true , --dry-run true or --dry true to run without actually pushing any data.","title":"Dry Run Mode"},{"location":"reference/multi-span-traces/","text":"TLDR: Prefer to read code? See the GitLab sample pipeline for a working example. tracepusher v0.5.0 and above supports tracing any arbitrarily complex multi-span trace. It does so by allowing users to generate and pass in their own trace-id and span-id . Consider the following batch script: #!/bin/bash main_time_start=0 counter=1 limit=5 while [ $counter -le $limit ] do echo \"in a loop. interation ${counter}\" # 1, 2, 3, 4, 5 done main_time_end=$SECONDS duration=$(( main_time_end - main_time_start )) As a trace, this would be represented as 1 parent span (that lasts for 5 seconds). \"Inside\" that parent span would be 5 sub spans, each denoting \"once around the loop\". In the default mode, tracepusher will auto-generate trace and span IDs but you can generate your own and pass them in. For example: # trace_id is 32 digits # span_id is 16 trace_id=$(hexdump -vn16 -e'4/4 \"%08X\" 1 \"\\n\"' /dev/urandom) span_id=$(hexdump -vn8 -e'4/4 \"%08X\" 1 \"\\n\"' /dev/urandom) The parent span would look like the following. Notice the --time-shift=true parameter is set. If this was not set, the timings would not make sense. For more information, see time shifting Parent Span Example python3 tracepusher.py \\ --endpoint http://localhost:4318 \\ --service-name \"serviceA\" \\ --span-name \"main_span\" \\ --duration ${duration} \\ --trace-id ${trace_id} \\ --span-id ${span_id} \\ --time-shift True Sub Span Example # Note: subspan time is tracked independently to \"main\" span time while [ $counter -lt $limit ] do # Calculate unique ID for this span sub_span_id=$(hexdump -vn8 -e'4/4 \"%08X\" 1 \"\\n\"' /dev/urandom) sub_span_time_start=$SECONDS # Do real work here... sleep 1 subspan_time_end=$SECONDS duration=$$(( $time_end - $time_start )) counter=$(( $counter + 1 )) python3 tracepusher.py \\ --endpoint http://localhost:4318 \\ --service-name serviceA \\ --span-name \"subspan${counter}\" \\ --duration ${duration} \\ --trace-id ${trace_id} \\ --parent-span-id ${span_id} \\ --span-id ${subspan_id} \\ --time-shift True done","title":"Multi span traces"},{"location":"reference/multi-span-traces/#parent-span-example","text":"python3 tracepusher.py \\ --endpoint http://localhost:4318 \\ --service-name \"serviceA\" \\ --span-name \"main_span\" \\ --duration ${duration} \\ --trace-id ${trace_id} \\ --span-id ${span_id} \\ --time-shift True","title":"Parent Span Example"},{"location":"reference/multi-span-traces/#sub-span-example","text":"# Note: subspan time is tracked independently to \"main\" span time while [ $counter -lt $limit ] do # Calculate unique ID for this span sub_span_id=$(hexdump -vn8 -e'4/4 \"%08X\" 1 \"\\n\"' /dev/urandom) sub_span_time_start=$SECONDS # Do real work here... sleep 1 subspan_time_end=$SECONDS duration=$$(( $time_end - $time_start )) counter=$(( $counter + 1 )) python3 tracepusher.py \\ --endpoint http://localhost:4318 \\ --service-name serviceA \\ --span-name \"subspan${counter}\" \\ --duration ${duration} \\ --trace-id ${trace_id} \\ --parent-span-id ${span_id} \\ --span-id ${subspan_id} \\ --time-shift True done","title":"Sub Span Example"},{"location":"reference/otel-col/","text":"This page shows sample configuration and instructions for creating an OpenTelemetry Collector. Specifically, the config.yaml shows how to send traces to Dynatrace as a backend. If you need Dynatrace tenant, click here to signup for a free trial . Download Collector The Python script will generate and push a trace to an OpenTelemetry collector. So of course, you need one available. If you have a collector already available, go on ahead to run the tool. If you don't have one already available, follow these steps. Download and extract the collector binary for your platform from here . For example, for windows: https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v0.78.0/otelcol-contrib_0.78.0_windows_amd64.tar.gz Unzip and extract so you have the binary (eg. otelcol.exe ) Create config.yaml The OpenTelemetry collector needs a config file - this is how you decide which trace backend the traces will go to. Save this file alongside otelcol.exe as config.yaml . You will need to modify the otlphttp code for your backend. The example given is for Dynatrace trace ingest. For Dynatrace, the API token needs Ingest OpenTelemetry traces permissions. receivers: otlp: protocols: grpc: http: processors: batch: send_batch_max_size: 1000 timeout: 30s send_batch_size : 800 memory_limiter: check_interval: 1s limit_percentage: 70 spike_limit_percentage: 30 exporters: logging: verbosity: detailed otlphttp: endpoint: https://abc12345.live.dynatrace.com/api/v2/otlp headers: Authorization: \"Api-Token dt0c01.sample.secret\" service: extensions: [] pipelines: traces: receivers: [otlp] processors: [batch] exporters: [otlphttp,logging] metrics: receivers: [otlp] processors: [memory_limiter,batch] exporters: [otlphttp] Start The Collector Open a command / terminal window and run: otelcol.exe --config config.yaml Then run tracepusher: python tracepusher.py http://localhost:4318 tracepusher my-span 2","title":"Otel col"},{"location":"reference/otel-col/#download-collector","text":"The Python script will generate and push a trace to an OpenTelemetry collector. So of course, you need one available. If you have a collector already available, go on ahead to run the tool. If you don't have one already available, follow these steps. Download and extract the collector binary for your platform from here . For example, for windows: https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v0.78.0/otelcol-contrib_0.78.0_windows_amd64.tar.gz Unzip and extract so you have the binary (eg. otelcol.exe )","title":"Download Collector"},{"location":"reference/otel-col/#create-configyaml","text":"The OpenTelemetry collector needs a config file - this is how you decide which trace backend the traces will go to. Save this file alongside otelcol.exe as config.yaml . You will need to modify the otlphttp code for your backend. The example given is for Dynatrace trace ingest. For Dynatrace, the API token needs Ingest OpenTelemetry traces permissions. receivers: otlp: protocols: grpc: http: processors: batch: send_batch_max_size: 1000 timeout: 30s send_batch_size : 800 memory_limiter: check_interval: 1s limit_percentage: 70 spike_limit_percentage: 30 exporters: logging: verbosity: detailed otlphttp: endpoint: https://abc12345.live.dynatrace.com/api/v2/otlp headers: Authorization: \"Api-Token dt0c01.sample.secret\" service: extensions: [] pipelines: traces: receivers: [otlp] processors: [batch] exporters: [otlphttp,logging] metrics: receivers: [otlp] processors: [memory_limiter,batch] exporters: [otlphttp]","title":"Create config.yaml"},{"location":"reference/otel-col/#start-the-collector","text":"Open a command / terminal window and run: otelcol.exe --config config.yaml Then run tracepusher: python tracepusher.py http://localhost:4318 tracepusher my-span 2","title":"Start The Collector"},{"location":"reference/span-attribute-types/","text":"Span Attribute Types The optional -spnattrs or equivalent long form version: --span-attributes exists to add span attributes to the spans that tracepusher creates. Add as many attributes as you like. Formatting Span Attributes Tracepusher will accept two possible inputs: --span-attributes foo=bar --span-attributes foo=bar=<TYPE> In the first, the value is assumed to be of type stringValue . In the second, you specify the value type. Possible types are: stringValue , boolValue , intValue , doubleValue , arrayValue , kvlistValue or bytesValue . Separate each attribute with a space. python tracepusher.py \\ --endpoint http(s)://OTEL-COLLECTOR-ENDPOINT:4318 --service-name service_name \\ --span-name spanA \\ --duration 2 \\ --span-attributes foo=bar foo2=23=intValue docker run gardnera/tracepusher:v0.6.0 \\ -ep http(s)://OTEL-COLLECTOR-ENDPOINT:4318 \\ -sen service_name \\ -spn span_name \\ -dur SPAN_TIME_IN_SECONDS \\ -spnattrs foo=bar foo2=bar2=stringValue Valid Types The following are all valid: stringValue boolValue intValue doubleValue arrayValue kvlistValue bytesValue","title":"Span attribute types"},{"location":"reference/span-attribute-types/#span-attribute-types","text":"The optional -spnattrs or equivalent long form version: --span-attributes exists to add span attributes to the spans that tracepusher creates. Add as many attributes as you like.","title":"Span Attribute Types"},{"location":"reference/span-attribute-types/#formatting-span-attributes","text":"Tracepusher will accept two possible inputs: --span-attributes foo=bar --span-attributes foo=bar=<TYPE> In the first, the value is assumed to be of type stringValue . In the second, you specify the value type. Possible types are: stringValue , boolValue , intValue , doubleValue , arrayValue , kvlistValue or bytesValue . Separate each attribute with a space. python tracepusher.py \\ --endpoint http(s)://OTEL-COLLECTOR-ENDPOINT:4318 --service-name service_name \\ --span-name spanA \\ --duration 2 \\ --span-attributes foo=bar foo2=23=intValue docker run gardnera/tracepusher:v0.6.0 \\ -ep http(s)://OTEL-COLLECTOR-ENDPOINT:4318 \\ -sen service_name \\ -spn span_name \\ -dur SPAN_TIME_IN_SECONDS \\ -spnattrs foo=bar foo2=bar2=stringValue","title":"Formatting Span Attributes"},{"location":"reference/span-attribute-types/#valid-types","text":"The following are all valid: stringValue boolValue intValue doubleValue arrayValue kvlistValue bytesValue","title":"Valid Types"},{"location":"reference/time-shifting/","text":"Time Shifting In \"default mode\" tracepusher starts a trace now and finishes it SPAN_TIME_IN_SECONDS in the future. You may want to push timings for traces that have already occurred (eg. shell scripts). See https://github.com/agardnerIT/tracepusher/issues/4. --time-shift true means start and end times will be shifted back by whatever is specified as the --duration .","title":"Time shifting"},{"location":"reference/time-shifting/#time-shifting","text":"In \"default mode\" tracepusher starts a trace now and finishes it SPAN_TIME_IN_SECONDS in the future. You may want to push timings for traces that have already occurred (eg. shell scripts). See https://github.com/agardnerIT/tracepusher/issues/4. --time-shift true means start and end times will be shifted back by whatever is specified as the --duration .","title":"Time Shifting"},{"location":"usage/","text":"Use tracepusher in various contexts Docker Use tracepusher as a Docker image Docker CI-ready Image tracepusher inside a Docker image w/ extra tools (eg. hexdump). Useful for running CI pipelines in container images. Python Run tracepusher as a Python script .","title":"Usage"},{"location":"usage/#use-tracepusher-in-various-contexts","text":"","title":"Use tracepusher in various contexts"},{"location":"usage/#docker","text":"Use tracepusher as a Docker image","title":"Docker"},{"location":"usage/#docker-ci-ready-image","text":"tracepusher inside a Docker image w/ extra tools (eg. hexdump). Useful for running CI pipelines in container images.","title":"Docker CI-ready Image"},{"location":"usage/#python","text":"Run tracepusher as a Python script .","title":"Python"},{"location":"usage/ci/","text":"tracepusher CI-ready image The gardnera/tracepusher:v0.6.0-ci image is CI ready. This containers drops you into a normal shell where you have access to various tools like hexdump (for generating UUIDs). Tracepusher can be executed using Python from within this container. See Python usage instructions for more info. Example: Tracing GitLab pipelines See Tracing GitLab pipelines with tracepusher on YouTube for a walkthrough and get started with the sample script .","title":"Usage > CI"},{"location":"usage/ci/#tracepusher-ci-ready-image","text":"The gardnera/tracepusher:v0.6.0-ci image is CI ready. This containers drops you into a normal shell where you have access to various tools like hexdump (for generating UUIDs). Tracepusher can be executed using Python from within this container. See Python usage instructions for more info.","title":"tracepusher CI-ready image"},{"location":"usage/ci/#example-tracing-gitlab-pipelines","text":"See Tracing GitLab pipelines with tracepusher on YouTube for a walkthrough and get started with the sample script .","title":"Example: Tracing GitLab pipelines"},{"location":"usage/docker/","text":"Requirements and Prequisites A running OpenTelemetry collector (see below) Docker Basic Docker Usage docker run gardnera/tracepusher:v0.6.0 \\ -ep http(s)://OTEL-COLLECTOR-ENDPOINT:4318 \\ -sen service_name \\ -spn span_name \\ -dur SPAN_TIME_IN_SECONDS Optional Parameters --dry-run True|False --debug True|False --time-shift True|False --parent-span-id <16 character hex id> --trace-id <32 character hex id> --span-id <16 character hex id> --span-attributes key=value key2=value2=type For span atttribute types, see Span Attribute Types . For multi-span traces, see multi span traces","title":"Usage > Docker"},{"location":"usage/docker/#requirements-and-prequisites","text":"A running OpenTelemetry collector (see below) Docker","title":"Requirements and Prequisites"},{"location":"usage/docker/#basic-docker-usage","text":"docker run gardnera/tracepusher:v0.6.0 \\ -ep http(s)://OTEL-COLLECTOR-ENDPOINT:4318 \\ -sen service_name \\ -spn span_name \\ -dur SPAN_TIME_IN_SECONDS","title":"Basic Docker Usage"},{"location":"usage/docker/#optional-parameters","text":"--dry-run True|False --debug True|False --time-shift True|False --parent-span-id <16 character hex id> --trace-id <32 character hex id> --span-id <16 character hex id> --span-attributes key=value key2=value2=type For span atttribute types, see Span Attribute Types . For multi-span traces, see multi span traces","title":"Optional Parameters"},{"location":"usage/python/","text":"Requirements and Prequisites A running OpenTelemetry collector (see below) Python + Requests module Basic Python Usage python3 tracepusher.py -h or python3 tracepusher.py --help shows help text. python tracepusher.py \\ --endpoint http(s)://OTEL-COLLECTOR-ENDPOINT:4318 \\ --service-name service_name \\ --span-name spanA \\ --duration 2 Optional Parameters --dry-run True|False --debug True|False --time-shift True|False --parent-span-id <16 character hex id> --trace-id <32 character hex id> --span-id <16 character hex id> --span-attributes key=value [key2=value2...] For information on span atttributes and span attribute types, see Span Attribute Types . For multi-span traces, see multi span traces","title":"Usage > Python"},{"location":"usage/python/#requirements-and-prequisites","text":"A running OpenTelemetry collector (see below) Python + Requests module","title":"Requirements and Prequisites"},{"location":"usage/python/#basic-python-usage","text":"python3 tracepusher.py -h or python3 tracepusher.py --help shows help text. python tracepusher.py \\ --endpoint http(s)://OTEL-COLLECTOR-ENDPOINT:4318 \\ --service-name service_name \\ --span-name spanA \\ --duration 2","title":"Basic Python Usage"},{"location":"usage/python/#optional-parameters","text":"--dry-run True|False --debug True|False --time-shift True|False --parent-span-id <16 character hex id> --trace-id <32 character hex id> --span-id <16 character hex id> --span-attributes key=value [key2=value2...] For information on span atttributes and span attribute types, see Span Attribute Types . For multi-span traces, see multi span traces","title":"Optional Parameters"}]}